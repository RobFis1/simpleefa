declare namespace functx = 'http://www.functx.com'; 
declare function functx:trim($arg as xs:string? ) as xs:string {
	fn:replace(fn:replace($arg,'(\\s|[ ]|[,.!:;]|[n][b][s][p][;])+$',''),'^(\\s|[ ]|[,.!:;]|[n][b][s][p][;])+','')
};
declare function functx:repeat-string($stringToRepeat as xs:string?,$count as xs:integer) as xs:string { 
	string-join((for $i in 1 to $count return $stringToRepeat),'')
};
declare function functx:pad-integer-to-length ($integerToPad as xs:anyAtomicType?,$length as xs:integer )  as xs:string {
	if ($length < string-length(string($integerToPad)))
	then error(xs:QName('functx:Integer_Longer_Than_Length'))
	else concat
		(functx:repeat-string(
			'0',$length - string-length(string($integerToPad))),
		string($integerToPad))
	} ;
declare function functx:time ($hour as xs:anyAtomicType,$minute as xs:anyAtomicType,$second as xs:anyAtomicType)  as xs:time {
 xs:time(
  concat(
    functx:pad-integer-to-length(xs:integer($hour),2),':',
    functx:pad-integer-to-length(xs:integer($minute),2),':',
	 functx:pad-integer-to-length(xs:integer($second),2)))
} ;
declare function functx:getTrainSymbolFromName($name as xs:string?) as xs:string { 
	replace(replace(replace(replace(replace(replace(replace(replace(replace($name, 'InterCity', 'IC'), 'BSB-Zug', 'BSB'), 'U-Bahn', 'U'), '(InterRegio-Express)', 'IRE'), 'S-Bahn', 'S'), '(Regionalbahn)|(Regional-Bahn)', 'RB'), '(RegionalExpress)|(Regional-Express)', 'RE'), '(InterRegio)|(Interregio)', 'IR'), 'Regio', 'R')
};
declare function functx:getTrack($track as xs:string?) as xs:string { 
	replace(replace(replace(replace(replace(replace($track,'Platform ',''),'Track ',''),'Bstg. ',''),'Gleis ',''),'Steig ',''),'Gl. ','')
};

declare variable $doc external;
for $req in $doc//itdDepartureMonitorRequest 
	let $hour := data($req/itdDateTime/itdTime/@hour) 
	let $minute := data($req/itdDateTime/itdTime/@minute)
	let $day := data($req/itdDateTime/itdDate/@day)	
	let $month := data($req/itdDateTime/itdDate/@month)
	let $year := data($req/itdDateTime/itdDate/@year)
	let $x := $req/itdOdv/itdOdvName/odvNameElem/@x
	let $y := $req/itdOdv/itdOdvName/odvNameElem/@y 
return 
if (fn:count($req/itdOdv/itdOdvName[@state='identified']) < 1) 
then <request id='{$req/@requestID}'><error code='404'>Station not found.</error></request> 
 else   
<request id='{$req/@requestID}'>
	<for>
		<station id='{$req/itdOdv/itdOdvName/odvNameElem/@id}'>
			{$req/itdOdv/itdOdvName/odvNameElem/child::text()}
			<location_name>
				{data($req/itdOdv/itdOdvName/odvNameElem/@locality)}
			</location_name>
			<station_name>
				{data($req/itdOdv/itdOdvName/odvNameElem/@objectName)}
			</station_name>
			<position x='{xs:decimal($x - 3000060)}' y='{xs:decimal(6158420-$y)}' />
		</station>
		<dateandtime>
			<time>
				{functx:time($hour,$minute,0)}
			</time>
			<date>
				{$year}-{$month}-{$day}
			</date>
		</dateandtime>
	</for>
<next_arrivals>
{for $dep in $req/itdArrivalList/itdArrival
	let $hour := data($dep/itdDateTime/itdTime/@hour)
	let $minute := data($dep/itdDateTime/itdTime/@minute)
	let $day := data($dep/itdDateTime/itdDate/@day)	
	let $month := data($dep/itdDateTime/itdDate/@month)
	let $year := data($dep/itdDateTime/itdDate/@year)
	let $myline := $dep/itdServingLine
	let $type := data($myline/@motType)
	let $traintype := data($myline/@trainType)
	let $number := if ((($type = 0) and (string($traintype) != '')) or empty($myline/@number)) then data($myline/@trainNum) else data($myline/@number)
	let $symbol_temp := if ($type = 0) then fn:concat(string($traintype),' ',string($number)) else data($myline/@symbol)
	let $symbol := if (functx:trim(string($symbol_temp)) ='') then functx:getTrainSymbolFromName(data($myline/itdNoTrain/@name)) else $symbol_temp 
	let $track := functx:getTrack(data($dep/@platformName))
	return 
		<arrival track='{$track}'>
			<dateandtime countdown='{data($dep/@countdown)}'>
				<time>
					{functx:time($hour,$minute,0)}
				</time>
				<date>
					{$year}-{$month}-{$day}
				</date>
			</dateandtime>
			<to>
				<station id='{data($dep/itdServingLine/@destID)}'>
					{data($dep/itdServingLine/@direction)}
				</station>
			</to>
			<line type='{$type}' symbol='{$symbol}' number='{$number}'>
				<train id='{data($myline/@key)}' name='{data($myline/itdNoTrain/@name)}'>
					{data($myline/itdNoTrain)}								
				</train>
				<route_description>
					{
						for $line in $req/itdServingLines/itdServingLine 
						where data($line/motDivaParams/@line) = data($myline/motDivaParams/@line)
						and data($line/motDivaParams/@supplement) = data($myline/motDivaParams/@supplement)
						and data($line/motDivaParams/@direction) = data($myline/motDivaParams/@direction)				
						return data($line/itdRouteDescText)
					}
				</route_description>
			</line>
		</arrival>
}
	</next_arrivals>
</request>