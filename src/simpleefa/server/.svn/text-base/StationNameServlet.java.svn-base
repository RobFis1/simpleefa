package simpleefa.server;


import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;

import java.net.HttpURLConnection;
import java.net.URL;

import java.net.URLDecoder;
import java.net.URLEncoder;


import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.namespace.QName;
import javax.xml.xquery.XQConnection;
import javax.xml.xquery.XQDataSource;

import javax.xml.xquery.XQPreparedExpression;
import javax.xml.xquery.XQSequence;

import net.sf.saxon.xqj.SaxonXQDataSource;

public class StationNameServlet extends HttpServlet {

	private static final long serialVersionUID = -4356636877078339046L;
	private final XQDataSource dataSource = new SaxonXQDataSource();


	@Override
	public void doGet(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {
		
		String efa_url = Simpleefa.EFA_URL;

		if (request.getParameter("efa_url") != null) {
			efa_url = request.getParameter("efa_url");
		}

		ServletContext c = this.getServletContext();

		if (!Simpleefa.checkLimit(request, c)) {
			Simpleefa.limitReached(request, response);			
			return;			
		}

		XQPreparedExpression pEx;
		InputStream input;
		XQConnection conn;

		int limit = ensureInt(request.getParameter("maxResults"),20);
		String station = request.getParameter("station") != null ? request.getParameter("station") : "";

		station = URLDecoder.decode(station,"utf-8");

		String station_enc = URLEncoder.encode(station, "iso-8859-15");

		try {

			conn =dataSource.getConnection();

			String data = "";
			data += "&" + "anyObjFilter_dm=126";
			data += "&" + "anySigWhenPerfectNoOtherMatches=1";
			data += "&" + "convertAddressesITKernel2LocationServer=1";
			data += "&" + "convertCoord2LocationServer=1";
			data += "&" + "convertCrossingsITKernel2LocationServer=1";
			data += "&" + "convertPOIsITKernel2LocationServer=1";
			data += "&" + "convertStopsPTKernel2LocationServer=1";
			data += "&" + "cookieOptions=&itdLPxx_routeType=&excludedMeans=checkbox&itdLPxx_bikeTakeAlong=";
			data += "&" + "deleteAssignedStops_dm=0";
			data += "&" + "itOptionsActive=1";
			data += "&" + "itdLPxx_advancedOptionsNoJavaScript=true";
			data += "&" + "itdLPxx_dest=";
			data += "&" + "includeCompleteStopSeq=1";
			data += "&" + "itdLPxx_script=false";
			data += "&" + "language=de";
			data += "&" + "limit=" + 1;
			data += "&" + "locationServerActive=1";
			data += "&" + "maxAssignedStops=1";
			data += "&" + "mode=direct";
			data += "&" + "nameInfo_dm=invalid";
			data += "&" + "nameState_dm=empty";
			data += "&" + "name_dm=" + station_enc;
			data += "&" + "placeInfo_dm=invalid";
			data += "&" + "placeState_dm=empty";
			data += "&" + "place_dm=";
			data += "&" + "ptOptionsActive=1";
			data += "&" + "reducedAnyPostcodeObjFilter_dm=64";
			data += "&" + "reducedAnyTooManyObjFilter_dm=2";
			data += "&" + "reducedAnyWithoutAddressObjFilter_dm=103";
			data += "&" + "requestID=0";
			data += "&" + "sessionID=0";
			data += "&" + "stateless=1";
			data += "&" + "trITMOTvalue100=5";
			data += "&" + "typeInfo_dm=invalid";
			data += "&" + "type_dm=stop";
			data += "&" + "useAllStops=1";
			data += "&" + "useHouseNumberList_dm=1";
			data += "&" + "useProxFootSearch=0";
			data += "&" + "useRealtime=1";

			URL url = new URL(efa_url + "XML_DM_REQUEST");

			HttpURLConnection connection = (HttpURLConnection)url.openConnection();
			connection.setRequestMethod("POST");
			connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
			connection.setRequestProperty("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
			connection.setRequestProperty("Connection", "keep-alive");
			connection.setRequestProperty("Host", "www.efa-bw.de");
			connection.setRequestProperty("Connection", "keep-alive");
			connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Ubuntu; X11; Linux i686; rv:9.0.1) Gecko/20100101 Firefox/9.0.1");
			connection.setRequestProperty("Content-Length", "" + Integer.toString(data.getBytes().length));
			connection.setRequestProperty("Referer", "http://www.efa-bw.de/nvbw/XML_DM_REQUEST");


			connection.setUseCaches(false);
			connection.setDoInput(true);
			connection.setDoOutput(true);

			DataOutputStream wr = new DataOutputStream (connection.getOutputStream ());
			wr.writeBytes(data);
			wr.flush();
			wr.close();


			input = connection.getInputStream();
			response.setContentType("text/xml");

			String xquery = "declare namespace functx = 'http://www.functx.com';"+ 
			"declare function functx:trim($arg as xs:string? ) as xs:string {"+
			"	fn:replace(fn:replace($arg,'(\\s|[ ]|[,.!:;]|[n][b][s][p][;])+$',''),'^(\\s|[ ]|[,.!:;]|[n][b][s][p][;])+','')"+
			"};" +
			"declare function functx:repeat-string($stringToRepeat as xs:string?,$count as xs:integer) as xs:string { " +
			"	string-join((for $i in 1 to $count return $stringToRepeat),'')" +
			"};" +
			"declare function functx:pad-integer-to-length ($integerToPad as xs:anyAtomicType?,$length as xs:integer )  as xs:string {" +
			"	if ($length < string-length(string($integerToPad)))" +
			"	then error(xs:QName('functx:Integer_Longer_Than_Length'))" +
			"	else concat" +
			"		(functx:repeat-string(" +
			"			'0',$length - string-length(string($integerToPad)))," +
			"		string($integerToPad))" +
			"	} ;" +
			"declare function functx:time ($hour as xs:anyAtomicType,$minute as xs:anyAtomicType,$second as xs:anyAtomicType)  as xs:time {"+
			" xs:time("+
			"  concat("+
			"    functx:pad-integer-to-length(xs:integer($hour),2),':',"+
			"    functx:pad-integer-to-length(xs:integer($minute),2),':'," +
			"	 functx:pad-integer-to-length(xs:integer($second),2)))"+
			"} ;"+
			"declare variable $doc external;"+
			"declare variable $input external;" +
			"for $req in $doc//itdDepartureMonitorRequest " +
			"let $sortet_loc := for $loc in $req/itdOdv/itdOdvName/odvNameElem order by number(data($loc/@matchQuality)) descending return $loc"+
			" return " +
			"<possible_stations>" +
			"<for_input>" +
			"	{$input}" +
			"</for_input>" +
			"{" +
			" " +
			" for $loc in $sortet_loc[position() lt " + (limit+1) +"] " +
			"	let $match := data($loc/@matchQuality)" +
			"	let $id := data($loc/@id)" +
			"	let $x := data($loc/@x)" +
			"	let $y := data($loc/@y)" +
			"	let $stationname := data($loc/@objectName)" +
			"	let $locationname := data($loc/@locality)" +
			"	let $name := $loc/child::text()" +
			"	let $c := fn:count($doc//itdDepartureMonitorRequest/itdOdv/itdOdvName/odvNameElem)" +
			"	order by number($match) descending" +
			"	return " +
			"		<station id='{$id}' matching='{if ($c>1) then $match else 1000}'>" +
			"			{$name}" +
			"			<location_name>" +
			"				{$locationname}" +
			"			</location_name>" +
			"			<station_name>" +
			"				{$stationname}" +
			"			</station_name>" +
			"			<position x='{xs:decimal($x - 3000060)}' y='{xs:decimal(6158420-$y)}' />" +
			"		</station>" +
			"}" +
			"</possible_stations>";

			System.out.println("A");
			pEx = conn.prepareExpression(xquery);
			System.out.println("B");

			pEx.bindDocument(new QName("doc"), input, null,null);
			pEx.bindString(new QName("input"), station, null);
			System.out.println("C");

			ServletOutputStream out = response.getOutputStream();
			System.out.println("D");

			out.println("<?xml version=\"1.0\"?>");

			XQSequence result = pEx.executeQuery();
			result.writeSequence(out, null);	

			result.close();
			pEx.close();

			conn.close();
			out.close();
			input.close();
			connection.disconnect();

			System.gc();

		} catch (Exception e) {
			e.printStackTrace();
		}


	}


	private int ensureInt(String cand, int sonst) {
		try{
			sonst = Integer.parseInt(cand);
		}catch(Exception e){

		}
		return sonst;
	}
}
