package simpleefa.server;

import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Arrays;
import java.util.Date;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.namespace.QName;
import javax.xml.xquery.XQConnection;
import javax.xml.xquery.XQDataSource;
import javax.xml.xquery.XQPreparedExpression;
import javax.xml.xquery.XQSequence;

import net.sf.saxon.xqj.SaxonXQDataSource;

public class NextArrivalsServlet extends HttpServlet {

	private static final long serialVersionUID = -4356636877078339046L;
	private final XQDataSource dataSource = new SaxonXQDataSource();




	@Override
	public void doGet(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {
		
		String efa_url = Simpleefa.EFA_URL;

		if (request.getParameter("efa_url") != null) {
			efa_url = request.getParameter("efa_url");
		}

		ServletContext c = this.getServletContext();

		if (!Simpleefa.checkLimit(request, c)) {
			Simpleefa.limitReached(request, response);			
			return;			
		}

		XQConnection conn;
		XQPreparedExpression pEx;
		InputStream input;


		String station = request.getParameter("station") != null ? request.getParameter("station") : "";
		int woAssignedStops = ensureInt(request.getParameter("withoutNearStops"), 0);


		String station_enc = URLEncoder.encode(station, "iso-8859-15");
		long time = (getTime(request.getParameter("time")));
		int maxResults = ensureInt(request.getParameter("maxResults"),30);
		String filterTypes = request.getParameter("onlyTypes") != null ? request.getParameter("onlyTypes") : "0!1!2!3!4!5!6!7!8!9!10!11";
		Date d = new Date(time);

		response.setCharacterEncoding("utf-8");

		String[] types = filterTypes.split("!");
		String filterString = "";

		for (int i=0;i<12;i++) {

			if (Arrays.asList(types).contains("" + i)) {
				filterString += "&inclMOT_" + i + "=1";
			}else{
				filterString += "&inclMOT_" + i + "_disabled=1";

			}


		}

		String date = (d.getYear() + 1900) + ""+ leadingZero(d.getMonth()+1) +""+ leadingZero(d.getDate());
		try {

			conn =dataSource.getConnection();


			String data = "";
			data += "itdDateTimeDepArr=arr";
			data += "&" + "itdLPxx_dmMode=departure";
			data += "&" + "anyObjFilter_dm=126";
			data += "&" + "anySigWhenPerfectNoOtherMatches=1";
			data += "&" + "convertAddressesITKernel2LocationServer=1";
			data += "&" + "convertCoord2LocationServer=1";
			data += "&" + "convertCrossingsITKernel2LocationServer=1";
			data += "&" + "convertPOIsITKernel2LocationServer=1";
			data += "&" + "convertStopsPTKernel2LocationServer=1";
			data += "&" + "cookieOptions=&itdLPxx_routeType=&itdLPxx_bikeTakeAlong=";
			data += "&" + "deleteAssignedStops_dm=" + woAssignedStops;
			data += "&" + "itOptionsActive=1";
			data += "&" + "itdDate=" + date;
			data += "&" + "itdLPxx_advancedOptionsNoJavaScript=true";
			data += "&" + "itdLPxx_dest=";
			data += "&" + "includeCompleteStopSeq=1";
			data += "&" + "itdLPxx_script=false";
			data += "&" + "itdTimeHour=" + (d.getHours());
			data += "&" + "itdTimeMinute=" + (d.getMinutes());
			data += "&" + "language=de";
			data += "&" + "limit=" + maxResults;
			data += "&" + "locationServerActive=1";
			data += "&" + "maxAssignedStops=5";
			data += "&" + "mode=direct";
			data += "&" + "nameInfo_dm=invalid";
			data += "&" + "nameState_dm=empty";
			data += "&" + "name_dm=" + station_enc;
			data += "&" + "placeInfo_dm=invalid";
			data += "&" + "placeState_dm=empty";
			data += "&" + "place_dm=";
			data += "&" + "ptOptionsActive=1";
			data += "&" + "reducedAnyPostcodeObjFilter_dm=64";
			data += "&" + "reducedAnyTooManyObjFilter_dm=2";
			data += "&" + "reducedAnyWithoutAddressObjFilter_dm=103";
			data += "&" + "requestID=0";
			data += "&" + "sessionID=0";
			data += "&" + "stateless=1";
			//data += "&" + "trITMOTvalue100=5";
			data += "&" + "typeInfo_dm=invalid";
			data += "&" + "type_dm=stop";
			data += "&" + "useAllStops=1";
			data += "&" + "useHouseNumberList_dm=1";
			data += "&" + "useProxFootSearch=0";
			data += "&" + "useRealtime=1";
			data += "&" + "includedMeans=1";
			data += filterString;

			System.out.println(data);

			URL url = new URL(efa_url + "XML_DM_REQUEST");

			HttpURLConnection connection = (HttpURLConnection)url.openConnection();
			connection.setRequestMethod("POST");
			connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
			connection.setRequestProperty("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
			connection.setRequestProperty("Connection", "keep-alive");
			connection.setRequestProperty("Host", "www.efa-bw.de");
			connection.setRequestProperty("Connection", "keep-alive");
			connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Ubuntu; X11; Linux i686; rv:9.0.1) Gecko/20100101 Firefox/9.0.1");
			connection.setRequestProperty("Content-Length", "" + Integer.toString(data.getBytes().length));
			connection.setRequestProperty("Referer", "http://www.efa-bw.de/nvbw/XML_DM_REQUEST");

			connection.setUseCaches(false);
			connection.setDoInput(true);
			connection.setDoOutput(true);

			DataOutputStream wr = new DataOutputStream (connection.getOutputStream ());
			wr.writeBytes(data);
			wr.flush();
			wr.close();

			input = connection.getInputStream();

			response.setContentType("text/xml");

			String xquery = "declare namespace functx = 'http://www.functx.com';"+ 
			"declare function functx:trim($arg as xs:string? ) as xs:string {"+
			"	fn:replace(fn:replace($arg,'(\\s|[ ]|[,.!:;]|[n][b][s][p][;])+$',''),'^(\\s|[ ]|[,.!:;]|[n][b][s][p][;])+','')"+
			"};" +
			"declare function functx:repeat-string($stringToRepeat as xs:string?,$count as xs:integer) as xs:string { " +
			"	string-join((for $i in 1 to $count return $stringToRepeat),'')" +
			"};" +
			"declare function functx:pad-integer-to-length ($integerToPad as xs:anyAtomicType?,$length as xs:integer )  as xs:string {" +
			"	if ($length < string-length(string($integerToPad)))" +
			"	then error(xs:QName('functx:Integer_Longer_Than_Length'))" +
			"	else concat" +
			"		(functx:repeat-string(" +
			"			'0',$length - string-length(string($integerToPad)))," +
			"		string($integerToPad))" +
			"	} ;" +
			"declare function functx:time ($hour as xs:anyAtomicType,$minute as xs:anyAtomicType,$second as xs:anyAtomicType)  as xs:time {"+
			" xs:time("+
			"  concat("+
			"    functx:pad-integer-to-length(xs:integer($hour),2),':',"+
			"    functx:pad-integer-to-length(xs:integer($minute),2),':'," +
			"	 functx:pad-integer-to-length(xs:integer($second),2)))"+
			"} ;"+
			"declare function functx:getTrainSymbolFromName($name as xs:string?) as xs:string { " +
			"	replace(replace(replace(replace(replace(replace(replace(replace(replace($name, 'InterCity', 'IC'), 'BSB-Zug', 'BSB'), 'U-Bahn', 'U'), '(InterRegio-Express)', 'IRE'), 'S-Bahn', 'S'), '(Regionalbahn)|(Regional-Bahn)', 'RB'), '(RegionalExpress)|(Regional-Express)', 'RE'), '(InterRegio)|(Interregio)', 'IR'), 'Regio', 'R')" +
			"};" +
			"declare function functx:getTrack($track as xs:string?) as xs:string { " +
			"	replace(replace(replace(replace(replace(replace($track,'Platform ',''),'Track ',''),'Bstg. ',''),'Gleis ',''),'Steig ',''),'Gl. ','')" +
			"};" +

			"declare variable $doc external;"+
			"for $req in $doc//itdDepartureMonitorRequest " +
			"	let $hour := data($req/itdDateTime/itdTime/@hour) " +
			"	let $minute := data($req/itdDateTime/itdTime/@minute)" +
			"	let $day := data($req/itdDateTime/itdDate/@day)" +	
			"	let $month := data($req/itdDateTime/itdDate/@month)" +
			"	let $year := data($req/itdDateTime/itdDate/@year)" +
			"	let $x := $req/itdOdv/itdOdvName/odvNameElem/@x" +
			"	let $y := $req/itdOdv/itdOdvName/odvNameElem/@y " +
			"return " +
			"if (fn:count($req/itdOdv/itdOdvName[@state='identified']) < 1) " +
			"then <request id='{$req/@requestID}'><error code='404'>Station not found.</error></request> " +
			" else   " +
			"<request id='{$req/@requestID}'>" +
			"	<for>" +
			"		<station id='{$req/itdOdv/itdOdvName/odvNameElem/@id}'>" +
			"			{$req/itdOdv/itdOdvName/odvNameElem/child::text()}" +
			"			<location_name>" +
			"				{data($req/itdOdv/itdOdvName/odvNameElem/@locality)}" +
			"			</location_name>" +
			"			<station_name>" +
			"				{data($req/itdOdv/itdOdvName/odvNameElem/@objectName)}" +
			"			</station_name>" +
			"			<position x='{xs:decimal($x - 3000060)}' y='{xs:decimal(6158420-$y)}' />" +
			"		</station>" +
			"		<dateandtime>" +
			"			<time>" +
			"				{functx:time($hour,$minute,0)}" +
			"			</time>" +
			"			<date>" +
			"				{$year}-{$month}-{$day}" +
			"			</date>" +
			"		</dateandtime>" +
			"	</for>" +
			"<next_arrivals>" +
			"{for $dep in $req/itdArrivalList/itdArrival" +
			"	let $hour := data($dep/itdDateTime/itdTime/@hour)" +
			"	let $minute := data($dep/itdDateTime/itdTime/@minute)" +
			"	let $day := data($dep/itdDateTime/itdDate/@day)" +	
			"	let $month := data($dep/itdDateTime/itdDate/@month)" +
			"	let $year := data($dep/itdDateTime/itdDate/@year)" +
			"	let $myline := $dep/itdServingLine" +
			"	let $type := data($myline/@motType)" +
			"	let $traintype := data($myline/@trainType)" +
			"	let $number := if ((($type = 0) and (string($traintype) != '')) or empty($myline/@number)) then data($myline/@trainNum) else data($myline/@number)" +
			"	let $symbol_temp := if ($type = 0) then fn:concat(string($traintype),' ',string($number)) else data($myline/@symbol)" +
			"	let $symbol := if (functx:trim(string($symbol_temp)) ='') then functx:getTrainSymbolFromName(data($myline/itdNoTrain/@name)) else $symbol_temp "+
			"	let $track := functx:getTrack(data($dep/@platformName))" +
			"	return " +
			"		<arrival track='{$track}'>"+
			"			<dateandtime countdown='{data($dep/@countdown)}'>" +
			"				<time>" +
			"					{functx:time($hour,$minute,0)}" +
			"				</time>" +
			"				<date>" +
			"					{$year}-{$month}-{$day}" +
			"				</date>" +
			"			</dateandtime>" +
			"			<to>" +
			"				<station id='{data($dep/itdServingLine/@destID)}'>" +
			"					{data($dep/itdServingLine/@direction)}" +
			"				</station>" +
			"			</to>" +
			"			<line type='{$type}' symbol='{$symbol}' number='{$number}'>" +
			"				<train id='{data($myline/@key)}' name='{data($myline/itdNoTrain/@name)}'>" +
			"					{data($myline/itdNoTrain)}" +								
			"				</train>" +
			"				<route_description>" +
			"					{" +
			"						for $line in $req/itdServingLines/itdServingLine " +
			"						where data($line/motDivaParams/@line) = data($myline/motDivaParams/@line)" +
			"						and data($line/motDivaParams/@supplement) = data($myline/motDivaParams/@supplement)" +
			"						and data($line/motDivaParams/@direction) = data($myline/motDivaParams/@direction)" +				
			"						return data($line/itdRouteDescText)" +
			"					}" +
			"				</route_description>" +
			"			</line>" +
			"		</arrival>" +
			"}" +
			"</next_arrivals>" +
			"</request>" ;			


			pEx = conn.prepareExpression(xquery);

			pEx.bindDocument(new QName("doc"), input, null,null);


			ServletOutputStream out = response.getOutputStream();

			out.println("<?xml version=\"1.0\"?>");
			XQSequence result = pEx.executeQuery();
			result.writeSequence(out, null);	

			result.close();
			pEx.close();			
			conn.close();
			out.close();
			input.close();
			connection.disconnect();

			System.gc();

		} catch (Exception e) {
			e.printStackTrace();
		}


	}

	private String leadingZero(int i) {

		if (i<10) return "0" + i; else return Integer.toString(i);

	}

	private int ensureInt(String cand, int sonst) {
		try{
			sonst = Integer.parseInt(cand);
		}catch(Exception e){

		}
		return sonst;
	}

	private long getTime(String t) {

		try{
			return Long.parseLong(t);
		}catch(Exception e) {
			return System.currentTimeMillis();
		}

	}

}
