package simpleefa.server;

import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Arrays;
import java.util.Date;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.namespace.QName;
import javax.xml.xquery.XQConnection;
import javax.xml.xquery.XQDataSource;
import javax.xml.xquery.XQPreparedExpression;
import javax.xml.xquery.XQSequence;


import net.sf.saxon.xqj.SaxonXQDataSource;

public class ConnectionServlet extends HttpServlet {

	private static final long serialVersionUID = -4356636877078339046L;
	private final XQDataSource dataSource = new SaxonXQDataSource();

	@Override
	public void doGet(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {

		String efa_url = Simpleefa.EFA_URL;

		if (request.getParameter("efa_url") != null) {
			efa_url = request.getParameter("efa_url");
		}

		ServletContext c = this.getServletContext();

		if (!Simpleefa.checkLimit(request, c)) {
			Simpleefa.limitReached(request, response);			
			return;			
		}

		XQConnection conn;
		XQPreparedExpression pEx;
		InputStream input;


		//some ISO encoding the EFA-Service needs...
		String station = request.getParameter("from") != null ? request.getParameter("from") : "";
		String station_enc = URLEncoder.encode(station, "iso-8859-15");

		String station_to = request.getParameter("to") != null ? request.getParameter("to") : "";
		String station_to_enc = URLEncoder.encode(station_to, "iso-8859-15");

		String station_via = request.getParameter("via") != null ? request.getParameter("via") : "";
		String station_via_enc = URLEncoder.encode(station_via, "iso-8859-15");

		String depArr = (request.getParameter("timetype") != null && request.getParameter("timetype").toLowerCase().equals("arr")) ? request.getParameter("timetype") : "dep";

		long time = (getTime(request.getParameter("time")));
		int maxResults = ensureInt(request.getParameter("maxResults"),5);

		String filterTypes = request.getParameter("onlyTypes") != null ? request.getParameter("onlyTypes") : "0!1!2!3!4!5!6!7!8!9!10!11";
		Date d =new Date(time);

		response.setCharacterEncoding("utf-8");

		String date = (d.getYear() + 1900) + ""+ leadingZero(d.getMonth()+1) +""+ leadingZero(d.getDate());

		String[] types = filterTypes.split("!");
		String filterString = "";

		for (int i=0;i<12;i++) {
			if (Arrays.asList(types).contains("" + i)) {
				filterString += "&inclMOT_" + i + "=1";
			}else{
				filterString += "&inclMOT_" + i + "_disabled=1";

			}			
		}		

		try {

			conn =dataSource.getConnection();

			String data = "";
			data += "&" + "anySigWhenPerfectNoOtherMatches=1";
			data += "&" + "convertAddressesITKernel2LocationServer=1";
			data += "&" + "convertCoord2LocationServer=1";
			data += "&" + "convertCrossingsITKernel2LocationServer=1";
			data += "&" + "convertPOIsITKernel2LocationServer=1";
			data += "&" + "convertStopsPTKernel2LocationServer=1";
			data += "&" + "locationServerActive=1";
			data += "&" + "itdTimeHour=" + (d.getHours());
			data += "&" + "itdTimeMinute=" + (d.getMinutes());
			data += "&" + "itdDate=" + date;
			data += "&" + "language=de";
			data += "&" + "includedMeans=checkbox";
			data += "&" + "name_origin=" + station_enc;
			data += "&" + "name_destination=" + station_to_enc;
			data += "&" + "name_via=" + station_via_enc;
			data += "&" + "place_origin=";
			data += "&" + "place_destination=";
			data += "&" + "placeInfo_origin=invalid";
			data += "&" + "placeState_origin=empty";
			data += "&" + "placeInfo_destination=invalid";
			data += "&" + "ptOptionsActive=1";
			data += "&" + "itOptionsActive=1";
			data += "&" + "placeState_destination=empty";
			data += "&" + "itdTripDateTimeDepArr=" + depArr;
			data += "&" + "reducedAnyPostcodeObjFilter_origin=64";
			data += "&" + "reducedAnyTooManyObjFilter_origin=2";
			data += "&" + "reducedAnyWithoutAddressObjFilter_origin=103";
			data += "&" + "reducedAnyPostcodeObjFilter_destination=64";
			data += "&" + "reducedAnyTooManyObjFilter_destination=2";
			data += "&" + "reducedAnyWithoutAddressObjFilter_destination=103";
			data += "&" + "anyObjFilter_origin=126";
			data += "&" + "anyObjFilter_destination=126";
			data += "&" + "requestID=0";
			data += "&" + "sessionID=0";
			data += "&" + "stateless=1";
			data += "&" + "type_origin=stop";
			data += "&" + "type_destination=stop";
			data += "&" + "type_via="+(station_via.equals("")?"":"stop");
			data += "&" + "routeType=LEASTTIME";
			data += "&" + "execInst=normal";
			data += "&" + "calculateDistance=0";
			data += "&" + "changeSpeed=normal";
			data += "&" + "useAllStops=0";
			data += "&" + "useHouseNumberList_dm=1";
			data += "&" + "useProxFootSearch=1";
			data += "&" + "useRealtime=1";
			data += "&" + "calculateDistance=1";
			data += "&" + "calcNumberOfTrips=" +maxResults;
			data += filterString;

			URL url = new URL(efa_url + "XML_TRIP_REQUEST2");

			HttpURLConnection connection = (HttpURLConnection)url.openConnection();
			connection.setRequestMethod("POST");
			connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
			connection.setRequestProperty("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
			connection.setRequestProperty("Connection", "keep-alive");
			connection.setRequestProperty("Host", "www.efa-bw.de");
			connection.setRequestProperty("Connection", "keep-alive");
			connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Ubuntu; X11; Linux i686; rv:9.0.1) Gecko/20100101 Firefox/9.0.1");
			connection.setRequestProperty("Content-Length", "" + Integer.toString(data.getBytes().length));
			connection.setRequestProperty("Referer", "http://www.efa-bw.de/nvbw/XML_TRIP_REQUEST2");

			connection.setUseCaches(false);
			connection.setDoInput(true);
			connection.setDoOutput(true);

			DataOutputStream wr = new DataOutputStream (connection.getOutputStream ());
			wr.writeBytes(data);
			wr.flush();
			wr.close();

			input = connection.getInputStream();

			response.setContentType("text/xml");

			String xquery = "declare namespace functx = 'http://www.functx.com';"+ 
			"declare function functx:trim($arg as xs:string? ) as xs:string {"+
			"	fn:replace(fn:replace($arg,'(\\s|[ ]|[,.!:;]|[n][b][s][p][;])+$',''),'^(\\s|[ ]|[,.!:;]|[n][b][s][p][;])+','')"+
			"};" +
			"declare function functx:repeat-string($stringToRepeat as xs:string?,$count as xs:integer) as xs:string { " +
			"	string-join((for $i in 1 to $count return $stringToRepeat),'')" +
			"};" +
			"declare function functx:pad-integer-to-length ($integerToPad as xs:anyAtomicType?,$length as xs:integer )  as xs:string {" +
			"	if ($length < string-length(string($integerToPad)))" +
			"	then error(xs:QName('functx:Integer_Longer_Than_Length'))" +
			"	else concat" +
			"		(functx:repeat-string(" +
			"			'0',$length - string-length(string($integerToPad)))," +
			"		string($integerToPad))" +
			"	} ;" +
			"declare function functx:time ($hour as xs:anyAtomicType,$minute as xs:anyAtomicType,$second as xs:anyAtomicType)  as xs:time {"+
			" xs:time("+
			"  concat("+
			"    functx:pad-integer-to-length(xs:integer($hour),2),':',"+
			"    functx:pad-integer-to-length(xs:integer($minute),2),':'," +
			"	 functx:pad-integer-to-length(xs:integer($second),2)))"+
			"} ;"+
			"declare variable $doc external;"+
			"for $req in $doc//itdTripRequest " +
			"	let $hour := data($req/itdTripDateTime/itdDateTime/itdTime/@hour) " +
			"	let $minute := data($req/itdTripDateTime/itdDateTime/itdTime/@minute)" +
			"	let $day := data($req/itdTripDateTime/itdDateTime/itdDate/@day)" +	
			"	let $month := data($req/itdTripDateTime/itdDateTime/itdDate/@month)" +
			"	let $year := data($req/itdTripDateTime/itdDateTime/itdDate/@year) " +
			"return " +
			"if (fn:count($req/itdOdv/itdOdvName[@state='identified']) < 2) " +
			"then <request id='{$req/@requestID}'><error code='404'>Station not found.</error></request> " +
			" else   " +
			"<request id='{$req/@requestID}'>" +
			"	<for>" +
			"		<station_from id='{$req/itdOdv[@usage='origin']/itdOdvName/odvNameElem/@id}'>" +
			"			{$req/itdOdv[@usage='origin']/itdOdvName/odvNameElem/child::text()}" +
			"			<location_name>" +
			"				{data($req/itdOdv[@usage='origin']/itdOdvName/odvNameElem/@locality)}" +
			"			</location_name>" +
			"			<station_name>" +
			"				{data($req/itdOdv[@usage='origin']/itdOdvName/odvNameElem/@objectName)}" +
			"			</station_name>" +
			"		</station_from>" +
			"		<station_to id='{$req/itdOdv[@usage='destination']/itdOdvName/odvNameElem/@id}'>" +
			"			{$req/itdOdv[@usage='destination']/itdOdvName/odvNameElem/child::text()}" +
			"			<location_name>" +
			"				{data($req/itdOdv[@usage='destination']/itdOdvName/odvNameElem/@locality)}" +
			"			</location_name>" +
			"			<station_name>" +
			"				{data($req/itdOdv[@usage='destination']/itdOdvName/odvNameElem/@objectName)}" +
			"			</station_name>" +
			"		</station_to>" +
			"		<dateandtime>" +
			"			<time>" +
			"				{functx:time($hour,$minute,0)}" +
			"			</time>" +
			"			<date>" +
			"				{$year}-{$month}-{$day}" +
			"			</date>" +
			"		</dateandtime>" +
			"	</for>" +
			"<connections>" +
			"{for $con in $req/itdItinerary/itdRouteList/itdRoute " +
			"		let $duration := data($con/@publicDuration)" +
			"		let $changes :=  data($con/@changes)" +
			"		let $hour := data($con/itdPartialRouteList/itdPartialRoute[1]/itdPoint[@usage='departure']/itdDateTime/itdTime/@hour) " +
			"		let $minute := data($con/itdPartialRouteList/itdPartialRoute[1]/itdPoint[@usage='departure']/itdDateTime/itdTime/@minute)" +
			"		let $day := data($con/itdPartialRouteList/itdPartialRoute[1]/itdPoint[@usage='departure']/itdDateTime/itdDate/@day)" +	
			"		let $month := data($con/itdPartialRouteList/itdPartialRoute[1]/itdPoint[@usage='departure']/itdDateTime/itdDate/@month)" +
			"		let $year := data($con/itdPartialRouteList/itdPartialRoute[1]/itdPoint[@usage='departure']/itdDateTime/itdDate/@year) " +
			"		return " +
			"			<connection duration='{$duration}' changes='{$changes}'>" +
			"				<dateandtime>" +
			"					<time>" +
			"						{functx:time($hour,$minute,0)}" +
			"					</time>" +
			"					<date>" +
			"						{$year}-{$month}-{$day}" +
			"					</date>" +
			"				</dateandtime>" +
			"				<connection_parts>" +
			"					{" +
			"						for $part in $con/itdPartialRouteList/itdPartialRoute" +
			"							let $duration := data($part/@timeMinute)" +
			"							let $line := $part/itdMeansOfTransport" +

			"							return <part duration='{$duration}'>" +
			"								{" +
			"									for $loc in $part/itdPoint" +
			"										let $id := data($loc/@stopID)" +
			"										let $used_for := data($loc/@usage)" +
			"										let	$platform := data($loc/@platform)" +
			"										let $name := data($loc/@name)" +
			"										let $station_name := data($loc/@nameWO)" +
			"										let $location_name := data($loc/@locality)" +
			"										let $hour := data($loc/itdDateTime/itdTime/@hour) " +
			"										let $minute := data($loc/itdDateTime/itdTime/@minute)" +
			"										let $day := data($loc/itdDateTime/itdDate/@day)" +	
			"										let $month := data($loc/itdDateTime/itdDate/@month)" +
			"										let $year := data($loc/itdDateTime/itdDate/@year) " +

			"									return " +
			"										<station used_for='{$used_for}' id='{$id}' platform='{fn:replace($platform,'#','')}'>" +
			"												{$name}" +
			"											<location_name>{$location_name}</location_name>" +
			"											<station_name>{$station_name}</station_name>" +
			"													<dateandtime>" +
			"												<time>" +
			"													{functx:time($hour,$minute,0)}" +
			"												</time>" +
			"												<date>" +
			"													{$year}-{$month}-{$day}" +
			"												</date>" +
			"											</dateandtime>"  +
			"										</station>" +
			"										" +
			"								}" +
			"								<line id='{data($line/motDivaParams/@line)}' direction='{data($line/motDivaParams/@direction)}'>" +
			"										{data($line/@name)}" +
			"										<train code='{data($line/@trainType)}' number='{data($line/@tC)}' shortname='{data($line/@shortname)}' type='{data($line/@motType)}'>{data($line/@trainName)}</train>" +
			"										" +
			"										<station used_for='destination' id='{data($line/@destID)}'>" +
			"											{data($line/@destination)}"+
			"										</station>" +
			"								</line>" +
			"								<infotext>" +
			"									{for $line in $part/itdInfoTextList/infoTextListElem" +
			"									return <line>{$line/child::text()}</line>}" +
			"								</infotext>" +
			"" +
			"							</part>" +
			"					}" +
			"				</connection_parts>"+
			"							" +
			"			</connection>" +			
			"}" +
			"</connections>" +
			"</request>" ;			

			pEx = conn.prepareExpression(xquery);

			pEx.bindDocument(new QName("doc"), input, null,null);


			ServletOutputStream out = response.getOutputStream();

			out.println("<?xml version=\"1.0\"?>");
			XQSequence result = pEx.executeQuery();

			result.writeSequence(out, null);	

			result.close();
			pEx.close();
			conn.close();
			out.close();
			input.close();
			connection.disconnect();

			System.gc();


		} catch (Exception e) {
			e.printStackTrace();
		}


	}


	private String leadingZero(int i) {
		if (i<10) return "0" + i; else return Integer.toString(i);
	}

	private int ensureInt(String cand, int sonst) {
		try{
			sonst = Integer.parseInt(cand);
		}catch(Exception e){}
		return sonst;
	}

	private long getTime(String t) {
		try{
			return Long.parseLong(t);
		}catch(Exception e) {
			return System.currentTimeMillis();
		}
	}
}
