declare namespace functx = 'http://www.functx.com';
declare function functx:trim($arg as xs:string? ) as xs:string {
	fn:replace(fn:replace($arg,'(\\s|[ ]|[,.!:;]|[n][b][s][p][;])+$',''),'^(\\s|[ ]|[,.!:;]|[n][b][s][p][;])+','')
};
declare function functx:repeat-string($stringToRepeat as xs:string?,$count as xs:integer) as xs:string { 
	string-join((for $i in 1 to $count return $stringToRepeat),'')
};
declare function functx:pad-integer-to-length ($integerToPad as xs:anyAtomicType?,$length as xs:integer )  as xs:string {
	if ($length < string-length(string($integerToPad)))
	then error(xs:QName('functx:Integer_Longer_Than_Length'))
	else concat
		(functx:repeat-string(
			'0',$length - string-length(string($integerToPad))),
		string($integerToPad))
	} ;
declare function functx:time ($hour as xs:anyAtomicType,$minute as xs:anyAtomicType,$second as xs:anyAtomicType)  as xs:time {
 xs:time(
  concat(
    functx:pad-integer-to-length(xs:integer($hour),2),':',
    functx:pad-integer-to-length(xs:integer($minute),2),':',
	functx:pad-integer-to-length(xs:integer($second),2)))
} ;
declare variable $doc external;
declare variable $x_cor external;
declare variable $y_cor external;
for $req in $doc//itdTripRequest 
	let $hour := data($req/itdTripDateTime/itdDateTime/itdTime/@hour) 
	let $minute := data($req/itdTripDateTime/itdDateTime/itdTime/@minute)
	let $day := data($req/itdTripDateTime/itdDateTime/itdDate/@day)	
	let $month := data($req/itdTripDateTime/itdDateTime/itdDate/@month)
	let $year := data($req/itdTripDateTime/itdDateTime/itdDate/@year) 
return 
if (fn:count($req/itdOdv/itdOdvName[@state='identified']) < 2) 
then <request id='{$req/@requestID}'><error code='404'>Station not found.</error></request> 
 else   
<request id='{$req/@requestID}'>
	<for>
		<station_from id='{$req/itdOdv[@usage='origin']/itdOdvName/odvNameElem/@id}'>
			{$req/itdOdv[@usage='origin']/itdOdvName/odvNameElem/child::text()}
			<location_name>
				{data($req/itdOdv[@usage='origin']/itdOdvName/odvNameElem/@locality)}
			</location_name>
			<station_name>
				{data($req/itdOdv[@usage='origin']/itdOdvName/odvNameElem/@objectName)}
			</station_name>
		</station_from>
		<station_to id='{$req/itdOdv[@usage='destination']/itdOdvName/odvNameElem/@id}'>
			{$req/itdOdv[@usage='destination']/itdOdvName/odvNameElem/child::text()}
			<location_name>
				{data($req/itdOdv[@usage='destination']/itdOdvName/odvNameElem/@locality)}
			</location_name>
			<station_name>
				{data($req/itdOdv[@usage='destination']/itdOdvName/odvNameElem/@objectName)}
			</station_name>
		</station_to>
		<dateandtime>
			<time>
				{functx:time($hour,$minute,0)}
			</time>
			<date>
				{$year}-{$month}-{$day}
			</date>
		</dateandtime>
	</for>
<connections>
{for $con in $req/itdItinerary/itdRouteList/itdRoute 
		let $duration := data($con/@publicDuration)
		let $changes :=  data($con/@changes)
		let $hour := data($con/itdPartialRouteList/itdPartialRoute[1]/itdPoint[@usage='departure']/itdDateTime/itdTime/@hour) 
		let $minute := data($con/itdPartialRouteList/itdPartialRoute[1]/itdPoint[@usage='departure']/itdDateTime/itdTime/@minute)
		let $day := data($con/itdPartialRouteList/itdPartialRoute[1]/itdPoint[@usage='departure']/itdDateTime/itdDate/@day)	
		let $month := data($con/itdPartialRouteList/itdPartialRoute[1]/itdPoint[@usage='departure']/itdDateTime/itdDate/@month)
		let $year := data($con/itdPartialRouteList/itdPartialRoute[1]/itdPoint[@usage='departure']/itdDateTime/itdDate/@year) 
		return 
			<connection duration='{$duration}' changes='{$changes}'>
				<dateandtime>
					<time>
						{functx:time($hour,$minute,0)}
					</time>
					<date>
						{$year}-{$month}-{$day}
					</date>
				</dateandtime>
				<connection_parts>
					{
						for $part in $con/itdPartialRouteList/itdPartialRoute
							let $duration := data($part/@timeMinute)
							let $distance := data($part/@distance)
							let $line := $part/itdMeansOfTransport

							return <part duration='{$duration}' distance='{$distance}'>
								{
									for $loc in $part/itdPoint
										let $id := data($loc/@stopID)
										let $used_for := data($loc/@usage)
										let	$platform := data($loc/@platform)
										let	$x := data($loc/@x)
										let	$y := data($loc/@y)
										let $name := data($loc/@name)
										let $station_name := data($loc/@nameWO)
										let $location_name := data($loc/@locality)
										let $hour := data($loc/itdDateTime/itdTime/@hour) 
										let $minute := data($loc/itdDateTime/itdTime/@minute)
										let $day := data($loc/itdDateTime/itdDate/@day)	
										let $month := data($loc/itdDateTime/itdDate/@month)
										let $year := data($loc/itdDateTime/itdDate/@year) 

									return 
										<station used_for='{$used_for}' id='{$id}' platform='{fn:replace($platform,'#','')}'>
												{$name}
											<location_name>{$location_name}</location_name>
											<station_name>{$station_name}</station_name>
													<dateandtime>
												<time>
													{functx:time($hour,$minute,0)}
												</time>
												<date>
													{$year}-{$month}-{$day}
												</date>
												<pos>
														<lng>{$x * $x_cor}</lng>
														<lat>{$y * $y_cor}</lat>
												</pos>
											</dateandtime>
										</station>
										
								}
								<line id='{data($line/motDivaParams/@line)}' direction='{data($line/motDivaParams/@direction)}'>
										{data($line/@name)}
										<train code='{data($line/@trainType)}' number='{data($line/@tC)}' shortname='{data($line/@shortname)}' type='{data($line/@motType)}'>{data($line/@trainName)}</train>
										
										<station used_for='destination' id='{data($line/@destID)}'>
											{data($line/@destination)}
										</station>
								</line>
								<infotext>
									{for $line in $part/itdInfoTextList/infoTextListElem
									return <line>{$line/child::text()}</line>}
								</infotext>

							</part>
					}
				</connection_parts>
							
			</connection>			
}
</connections>
</request>